'use strict';

/* COMMON Parts
===================================================================== */
{
  const html = document.querySelector('.js-page');
  if (html.classList.contains('nojs')) { html.classList.remove('nojs'); }

  window.addEventListener('load', () => {
    if (!html.classList.contains('webp') && !html.classList.contains('no-webp')) { html.classList.add('no-webp'); }
  });

  const smoothScroll = new SmoothScroll('a[href*="#"]');
}


/* MENU
===================================================================== */
{
  const toggleMenu = (btn) => {
    const body = document.querySelector('body');
    const header = document.querySelector('.js-header');
    const logo = header.querySelector('.js-logo img');
    const toggleBtn = btn;
    const LOGO_WHITE = 'img/chjewellery--white.svg';
    const currentLogoSrc = logo.getAttribute('src');

    const closeMenu = () => {
      logo.src = currentLogoSrc;
      header.classList.remove('active');
    };

    const showMenu = () => {
      const links = header.querySelectorAll('a[href]');

      if (header.classList.contains('active')) { logo.src = currentLogoSrc; }
      else { logo.src = LOGO_WHITE; }

      header.classList.toggle('active');
      body.classList.toggle('noscroll');

      window.addEventListener('keydown', (e) => {
        if (e.keyCode === 27) { closeMenu(); }
      });

      links.forEach((link) => {
        if (link) { link.addEventListener('click', closeMenu); }
      });
    };

    toggleBtn.addEventListener('click', showMenu);
  };

  const btnMenu = document.querySelector('.js-header button[name="toggle-menu"]');
  if (btnMenu) { toggleMenu(btnMenu); }
}


/* MODALS
===================================================================== */
{
  const toggleModal = (elem) => {
    const overlay = document.querySelector('.js-overlay');
    const modal = elem;
    const body = document.querySelector('body');
    const btnClose = modal.querySelector('button[name="close"]');

    const isActiveModal = () => overlay.classList.contains('active') && modal.classList.contains('active');

    event.preventDefault();

    const closeModal = () => {
      if (isActiveModal()) {
        overlay.classList.remove('active');
        modal.classList.remove('active');
        body.classList.remove('noscroll');
      }
    };

    if (!isActiveModal()) {
      overlay.classList.add('active');
      modal.classList.add('active');
      body.classList.add('noscroll');
    }

    if (btnClose) { btnClose.addEventListener('click', closeModal); }
    overlay.addEventListener('click', closeModal);

    window.addEventListener('keydown', (e) => {
      if (e.keyCode === 27) { closeModal(); }
    });
  };

  /* LOGIN
  ------------------------------------ */
  const modalLogin = document.querySelector('.js-modal-login');
  const buttons = document.querySelectorAll('.js-header a[href="login.html"]');

  buttons.forEach((item) => {
    if (item && modalLogin) {
      item.addEventListener('click', () => {
        const fieldMail = modalLogin.querySelector('input[type="email"]');
        toggleModal(modalLogin);
        fieldMail.focus();
      });
    }
  });

  /* FILTER
  ------------------------------------ */
  const btn = document.querySelector('.js-show-filter');
  const filter = document.querySelector('.js-filter');
  if (btn && filter) { btn.addEventListener('click', () => toggleModal(filter)); }
}


/* FORMS
===================================================================== */
{
  const checkForm = (formElem) => {
    const form = formElem;

    /* STORAGE
    ------------------------------------ */
    let lsMail = '';
    let isLS = true;

    try { lsMail = localStorage.getItem('mail'); }
    catch (err) { isLS = false; }

    /* MAIL
    ------------------------------------ */
    const mailField = form.querySelector('input[type="email"]');
    const MAIL_REGEX = /^\w+[\w-.]*@\w+((-\w+)|(\w*))\.[a-z]{2,3}$/;

    if (isLS) { mailField.value = lsMail; }

    const checkMail = (e) => {
      const mailValue = mailField.value;

      if (mailField.validity.valueMissing) {
        mailField.setCustomValidity('Required field');
        mailField.classList.add('error');
      } else if (!MAIL_REGEX.test(mailValue)) {
        mailField.setCustomValidity('Example: mail@mail.com');
        mailField.classList.add('error');
      } else {
        if (isLS) { localStorage.setItem('mail', mailValue); }
        mailField.setCustomValidity('');
        mailField.classList.remove('error');
      }

      if (e.type === 'input') { mailField.reportValidity(); }
    };

    if (mailField) {
      mailField.addEventListener('input', (e) => checkMail(e));
      mailField.addEventListener('invalid', (e) => checkMail(e));
    }

    /* PASSWORD
    ------------------------------------ */
    const passwordField = form.querySelector('input[type="password"]');

    const checkPassword = (e) => {
      if (passwordField.validity.valueMissing) {
        passwordField.setCustomValidity('Required field');
        passwordField.classList.add('error');
      } else {
        passwordField.setCustomValidity('');
        passwordField.classList.remove('error');
      }

      if (e.type === 'input') { passwordField.reportValidity(); }
    };

    if (passwordField) {
      passwordField.addEventListener('input', (e) => checkPassword(e));
      passwordField.addEventListener('invalid', (e) => checkPassword(e));
    }
  };

  /* LOGIN
  ------------------------------------ */
  const loginForm = document.querySelector('.js-login form');
  if (loginForm) { checkForm(loginForm); }

  /* SIGNUP
  ------------------------------------ */
  const signupForm = document.querySelector('.js-signup form');
  if (signupForm) { checkForm(signupForm); }
}


/* CAROUSEL
===================================================================== */
{
  const swiper = new Swiper({
    speed: 400,
    spaceBetween: 30,
    grabCursor: true,
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    keyboard: {
      enabled: true,
      onlyInViewport: true,
    },
    breakpoints: {
      // when window width is >= 320px
      320: {
        slidesPerView: 2,
        slidesPerGroup: 2,
        pagination: {
          el: '.swiper-pagination',
          type: 'fraction',
          clickable: false,
          renderFraction:  (currentClass, totalClass) => `<span class="${currentClass}"></span> <span>of</span> <span class="${totalClass}"></span>`,
        },
      },
      // when window width is >= 768px
      768: {
        slidesPerView: 2,
        slidesPerGroup: 2,
        pagination: {
          el: '.swiper-pagination',
          clickable: true,
          type: 'bullets',
          renderBullet:  (index, className) => '<span class="' + className + '">' + (index + 1) + "</span>",
        },
      },
      // when window width is >= 1024px
      1024: {
        slidesPerView: 4,
        slidesPerGroup: 4,
        pagination: {
          el: '.swiper-pagination',
          clickable: true,
          type: 'bullets',
          renderBullet:  (index, className) => '<span class="' + className + '">' + (index + 1) + "</span>",
        },
      },
    },
  });

  const carousel = document.querySelector('.js-carousel');
  if (carousel) { swiper.init(carousel); }
}


/* ACCORDION
===================================================================== */
{
  const toggleAccordion = (itemsList, closeAll = true) => {
    const toggleItem = (block) => {
      itemsList.forEach((item) => {
        if (item === block) { block.classList.toggle('active'); }
        else if (closeAll) { item.classList.remove('active'); }
      });
    };

    itemsList.forEach((item) => {
      const btn = item.querySelector('button[name="toggle"]');
      btn.addEventListener('click', () => toggleItem(item));
    });
  };

  /* FAQ
  ------------------------------------ */
  const faqAccordion = document.querySelectorAll('.js-faq-accordion');
  toggleAccordion(faqAccordion);

  /* FILTER
  ------------------------------------ */
  const filterAccordion = document.querySelectorAll('.js-filter-accordion');
  toggleAccordion(filterAccordion, false);
}
